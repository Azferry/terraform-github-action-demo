name: Template - TF Apply

on:
  workflow_call:
    inputs:
        working_dir:
            required: true
            type: string
        TF_STATE_FILE:
            required: true
            type: string
        TF_VARS_FILE:
            required: true
            type: string
    secrets:
        TF_STATE_RG:
            required: true
        TF_STATE_SA:
            required: true
        TF_STATE_CONTAINER:
            required: true
        ARM_CLIENT_ID:
            required: true
        ARM_CLIENT_SECRET:
            required: true
        ARM_SUBSCRIPTION_ID:
            required: true
        ARM_TENANT_ID:
            required: true
        ARM_ACCESS_KEY:
            required: true
    outputs:
      firstword:
        description: "The first output string"
        value: ${{ jobs.example_job.outputs.output1 }}
      secondword:
        description: "The second output string"
        value: ${{ jobs.example_job.outputs.output2 }}

jobs:
  terraform:
    name: TF_Run
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_dir }}

    outputs:
      output1: ${{ steps.step1.outputs.firstword }}
      output2: ${{ steps.step2.outputs.secondword }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: 1.1.7
        #   https://github.com/hashicorp/setup-terraform

      - name: Export Azure CLI Credentials
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_ACCESS_KEY=${{ secrets.ARM_ACCESS_KEY }}" >> $GITHUB_ENV

      - name: Terraform Init
        id: init
        run: |
          terraform init -backend-config="resource_group_name= ${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
            -backend-config="key=${{ inputs.TF_STATE_FILE }}"

      - name: Check Terraform Format
        id: fmt
        run: terraform fmt -check -recursive -diff -no-color

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="${{ inputs.TF_VARS_FILE }}" -no-color -out=tfplan && terraform show -no-color tfplan

      - name: Reformat Plan
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Add TF Plan to PR
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
                #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                <details><summary>Show Plan</summary>

                \`\`\`${{ env.PLAN }}\`\`\`

                </details>

                *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

                github.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                })

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var-file="${{ inputs.TF_VARS_FILE }}" -auto-approve

    #   - id: step1
    #     run: echo "::set-output name=firstword::hello"
    #   - id: step2
    #     run: echo "::set-output name=secondword::world"
